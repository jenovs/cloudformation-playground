AWSTemplateFormatVersion: '2010-09-09'
Description: Spotify Auhorization Token Generator

Parameters:
  clientId:
    Type: String
  clientSecret:
    Type: String

Resources:
  SpotifyTokenApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SpotifyTokenApi
      Description: Endpoint to get Spotify token

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com

  SpotifyTokenApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref SpotifyTokenApi
      StageName: LATEST

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: TokenRequest
    Properties:
      RestApiId: !Ref SpotifyTokenApi
      StageName: DummyStage

  TokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SpotifyTokenApi
      ParentId:
        Fn::GetAtt:
          - SpotifyTokenApi
          - RootResourceId
      PathPart: token

  TokenRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations
      ResourceId: !GetAtt SpotifyTokenApi.RootResourceId
      RestApiId: !Ref SpotifyTokenApi

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          const https = require('https');
          const authString = Buffer.from(`${clientId}:${clientSecret}`).toString(
            'base64'
          );
          const options = {
            hostname: 'accounts.spotify.com',
            path: '/api/token',
            port: 443,
            method: 'post',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              Authorization: 'Basic ' + authString,
            },
          };
          module.exports.handler = (event, ctx, cb) => {
            const req = https.request(options, res => {
              res.setEncoding('utf-8');
              res.on('data', body => {
                cb(null, {
                  statusCode: 200,
                  headers: {'Access-Control-Allow-Origin': '*'},
                  body,
                });
              });
            });
            req.on('error', err => cb(err));
            req.write('grant_type=client_credentials');
            req.end();
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

Outputs:
  ApiEndpoint:
    Value: !Sub https://${SpotifyTokenApi}.execute-api.${AWS::Region}.amazonaws.com/LATEST/
    Export:
      Name: SpotifyTokenApi
